/**
 *
 *  Package.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Package.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Package::Cols::_id = "id";
const std::string Package::Cols::_published_at = "published_at";
const std::string Package::Cols::_metadata = "metadata";
const std::string Package::Cols::_name = "name";
const std::string Package::Cols::_version = "version";
const std::string Package::Cols::_edition = "edition";
const std::string Package::Cols::_authors = "authors";
const std::string Package::Cols::_repository = "repository";
const std::string Package::Cols::_description = "description";
const std::string Package::Cols::_license = "license";
const std::string Package::Cols::_readme = "readme";
const std::string Package::Cols::_sha256sum = "sha256sum";
const std::string Package::primaryKeyName = "id";
const bool Package::hasPrimaryKey = true;
const std::string Package::tableName = "package";

const std::vector<typename Package::MetaData> Package::metaData_={
{"id","std::string","uuid",0,0,1,1},
{"published_at","::trantor::Date","timestamp with time zone",0,0,0,1},
{"metadata","std::string","jsonb",0,0,0,1},
{"name","std::string","text",0,0,0,1},
{"version","std::string","text",0,0,0,1},
{"edition","short","smallint",2,0,0,1},
{"authors","std::string","ARRAY",0,0,0,1},
{"repository","std::string","text",0,0,0,1},
{"description","std::string","text",0,0,0,1},
{"license","std::string","text",0,0,0,1},
{"readme","std::string","text",0,0,0,0},
{"sha256sum","std::string","character varying",64,0,0,1}
};
const std::string &Package::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Package::Package(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["published_at"].isNull())
        {
            auto timeStr = r["published_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                publishedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["metadata"].isNull())
        {
            metadata_=std::make_shared<std::string>(r["metadata"].as<std::string>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["version"].isNull())
        {
            version_=std::make_shared<std::string>(r["version"].as<std::string>());
        }
        if(!r["edition"].isNull())
        {
            edition_=std::make_shared<short>(r["edition"].as<short>());
        }
        if(!r["authors"].isNull())
        {
            authors_=std::make_shared<std::string>(r["authors"].as<std::string>());
        }
        if(!r["repository"].isNull())
        {
            repository_=std::make_shared<std::string>(r["repository"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["license"].isNull())
        {
            license_=std::make_shared<std::string>(r["license"].as<std::string>());
        }
        if(!r["readme"].isNull())
        {
            readme_=std::make_shared<std::string>(r["readme"].as<std::string>());
        }
        if(!r["sha256sum"].isNull())
        {
            sha256sum_=std::make_shared<std::string>(r["sha256sum"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                publishedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            metadata_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            version_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            edition_=std::make_shared<short>(r[index].as<short>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            authors_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            repository_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            license_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            readme_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            sha256sum_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Package::Package(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                publishedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            metadata_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            version_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            edition_=std::make_shared<short>((short)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            authors_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            repository_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            license_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            readme_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            sha256sum_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
}

Package::Package(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("published_at"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["published_at"].isNull())
        {
            auto timeStr = pJson["published_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                publishedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("metadata"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["metadata"].isNull())
        {
            metadata_=std::make_shared<std::string>(pJson["metadata"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<std::string>(pJson["version"].asString());
        }
    }
    if(pJson.isMember("edition"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["edition"].isNull())
        {
            edition_=std::make_shared<short>((short)pJson["edition"].asInt64());
        }
    }
    if(pJson.isMember("authors"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["authors"].isNull())
        {
            authors_=std::make_shared<std::string>(pJson["authors"].asString());
        }
    }
    if(pJson.isMember("repository"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["repository"].isNull())
        {
            repository_=std::make_shared<std::string>(pJson["repository"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("license"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["license"].isNull())
        {
            license_=std::make_shared<std::string>(pJson["license"].asString());
        }
    }
    if(pJson.isMember("readme"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["readme"].isNull())
        {
            readme_=std::make_shared<std::string>(pJson["readme"].asString());
        }
    }
    if(pJson.isMember("sha256sum"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["sha256sum"].isNull())
        {
            sha256sum_=std::make_shared<std::string>(pJson["sha256sum"].asString());
        }
    }
}

void Package::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[1]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                publishedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            metadata_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            version_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            edition_=std::make_shared<short>((short)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            authors_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            repository_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            license_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            readme_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            sha256sum_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
}

void Package::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("published_at"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["published_at"].isNull())
        {
            auto timeStr = pJson["published_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                publishedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("metadata"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["metadata"].isNull())
        {
            metadata_=std::make_shared<std::string>(pJson["metadata"].asString());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<std::string>(pJson["version"].asString());
        }
    }
    if(pJson.isMember("edition"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["edition"].isNull())
        {
            edition_=std::make_shared<short>((short)pJson["edition"].asInt64());
        }
    }
    if(pJson.isMember("authors"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["authors"].isNull())
        {
            authors_=std::make_shared<std::string>(pJson["authors"].asString());
        }
    }
    if(pJson.isMember("repository"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["repository"].isNull())
        {
            repository_=std::make_shared<std::string>(pJson["repository"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("license"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["license"].isNull())
        {
            license_=std::make_shared<std::string>(pJson["license"].asString());
        }
    }
    if(pJson.isMember("readme"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["readme"].isNull())
        {
            readme_=std::make_shared<std::string>(pJson["readme"].asString());
        }
    }
    if(pJson.isMember("sha256sum"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["sha256sum"].isNull())
        {
            sha256sum_=std::make_shared<std::string>(pJson["sha256sum"].asString());
        }
    }
}

const std::string &Package::getValueOfId() const noexcept
{
    const static std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getId() const noexcept
{
    return id_;
}
void Package::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Package::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Package::PrimaryKeyType & Package::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const ::trantor::Date &Package::getValueOfPublishedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(publishedAt_)
        return *publishedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Package::getPublishedAt() const noexcept
{
    return publishedAt_;
}
void Package::setPublishedAt(const ::trantor::Date &pPublishedAt) noexcept
{
    publishedAt_ = std::make_shared<::trantor::Date>(pPublishedAt);
    dirtyFlag_[1] = true;
}

const std::string &Package::getValueOfMetadata() const noexcept
{
    const static std::string defaultValue = std::string();
    if(metadata_)
        return *metadata_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getMetadata() const noexcept
{
    return metadata_;
}
void Package::setMetadata(const std::string &pMetadata) noexcept
{
    metadata_ = std::make_shared<std::string>(pMetadata);
    dirtyFlag_[2] = true;
}
void Package::setMetadata(std::string &&pMetadata) noexcept
{
    metadata_ = std::make_shared<std::string>(std::move(pMetadata));
    dirtyFlag_[2] = true;
}

const std::string &Package::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getName() const noexcept
{
    return name_;
}
void Package::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[3] = true;
}
void Package::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[3] = true;
}

const std::string &Package::getValueOfVersion() const noexcept
{
    const static std::string defaultValue = std::string();
    if(version_)
        return *version_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getVersion() const noexcept
{
    return version_;
}
void Package::setVersion(const std::string &pVersion) noexcept
{
    version_ = std::make_shared<std::string>(pVersion);
    dirtyFlag_[4] = true;
}
void Package::setVersion(std::string &&pVersion) noexcept
{
    version_ = std::make_shared<std::string>(std::move(pVersion));
    dirtyFlag_[4] = true;
}

const short &Package::getValueOfEdition() const noexcept
{
    const static short defaultValue = short();
    if(edition_)
        return *edition_;
    return defaultValue;
}
const std::shared_ptr<short> &Package::getEdition() const noexcept
{
    return edition_;
}
void Package::setEdition(const short &pEdition) noexcept
{
    edition_ = std::make_shared<short>(pEdition);
    dirtyFlag_[5] = true;
}

const std::string &Package::getValueOfAuthors() const noexcept
{
    const static std::string defaultValue = std::string();
    if(authors_)
        return *authors_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getAuthors() const noexcept
{
    return authors_;
}
void Package::setAuthors(const std::string &pAuthors) noexcept
{
    authors_ = std::make_shared<std::string>(pAuthors);
    dirtyFlag_[6] = true;
}
void Package::setAuthors(std::string &&pAuthors) noexcept
{
    authors_ = std::make_shared<std::string>(std::move(pAuthors));
    dirtyFlag_[6] = true;
}

const std::string &Package::getValueOfRepository() const noexcept
{
    const static std::string defaultValue = std::string();
    if(repository_)
        return *repository_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getRepository() const noexcept
{
    return repository_;
}
void Package::setRepository(const std::string &pRepository) noexcept
{
    repository_ = std::make_shared<std::string>(pRepository);
    dirtyFlag_[7] = true;
}
void Package::setRepository(std::string &&pRepository) noexcept
{
    repository_ = std::make_shared<std::string>(std::move(pRepository));
    dirtyFlag_[7] = true;
}

const std::string &Package::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getDescription() const noexcept
{
    return description_;
}
void Package::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[8] = true;
}
void Package::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[8] = true;
}

const std::string &Package::getValueOfLicense() const noexcept
{
    const static std::string defaultValue = std::string();
    if(license_)
        return *license_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getLicense() const noexcept
{
    return license_;
}
void Package::setLicense(const std::string &pLicense) noexcept
{
    license_ = std::make_shared<std::string>(pLicense);
    dirtyFlag_[9] = true;
}
void Package::setLicense(std::string &&pLicense) noexcept
{
    license_ = std::make_shared<std::string>(std::move(pLicense));
    dirtyFlag_[9] = true;
}

const std::string &Package::getValueOfReadme() const noexcept
{
    const static std::string defaultValue = std::string();
    if(readme_)
        return *readme_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getReadme() const noexcept
{
    return readme_;
}
void Package::setReadme(const std::string &pReadme) noexcept
{
    readme_ = std::make_shared<std::string>(pReadme);
    dirtyFlag_[10] = true;
}
void Package::setReadme(std::string &&pReadme) noexcept
{
    readme_ = std::make_shared<std::string>(std::move(pReadme));
    dirtyFlag_[10] = true;
}
void Package::setReadmeToNull() noexcept
{
    readme_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Package::getValueOfSha256sum() const noexcept
{
    const static std::string defaultValue = std::string();
    if(sha256sum_)
        return *sha256sum_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Package::getSha256sum() const noexcept
{
    return sha256sum_;
}
void Package::setSha256sum(const std::string &pSha256sum) noexcept
{
    sha256sum_ = std::make_shared<std::string>(pSha256sum);
    dirtyFlag_[11] = true;
}
void Package::setSha256sum(std::string &&pSha256sum) noexcept
{
    sha256sum_ = std::make_shared<std::string>(std::move(pSha256sum));
    dirtyFlag_[11] = true;
}

void Package::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Package::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "published_at",
        "metadata",
        "name",
        "version",
        "edition",
        "authors",
        "repository",
        "description",
        "license",
        "readme",
        "sha256sum"
    };
    return inCols;
}

void Package::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPublishedAt())
        {
            binder << getValueOfPublishedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMetadata())
        {
            binder << getValueOfMetadata();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEdition())
        {
            binder << getValueOfEdition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAuthors())
        {
            binder << getValueOfAuthors();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRepository())
        {
            binder << getValueOfRepository();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getLicense())
        {
            binder << getValueOfLicense();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getReadme())
        {
            binder << getValueOfReadme();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getSha256sum())
        {
            binder << getValueOfSha256sum();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Package::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void Package::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPublishedAt())
        {
            binder << getValueOfPublishedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getMetadata())
        {
            binder << getValueOfMetadata();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEdition())
        {
            binder << getValueOfEdition();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAuthors())
        {
            binder << getValueOfAuthors();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRepository())
        {
            binder << getValueOfRepository();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getLicense())
        {
            binder << getValueOfLicense();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getReadme())
        {
            binder << getValueOfReadme();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getSha256sum())
        {
            binder << getValueOfSha256sum();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Package::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPublishedAt())
    {
        ret["published_at"]=getPublishedAt()->toDbStringLocal();
    }
    else
    {
        ret["published_at"]=Json::Value();
    }
    if(getMetadata())
    {
        ret["metadata"]=getValueOfMetadata();
    }
    else
    {
        ret["metadata"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getEdition())
    {
        ret["edition"]=getValueOfEdition();
    }
    else
    {
        ret["edition"]=Json::Value();
    }
    if(getAuthors())
    {
        ret["authors"]=getValueOfAuthors();
    }
    else
    {
        ret["authors"]=Json::Value();
    }
    if(getRepository())
    {
        ret["repository"]=getValueOfRepository();
    }
    else
    {
        ret["repository"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getLicense())
    {
        ret["license"]=getValueOfLicense();
    }
    else
    {
        ret["license"]=Json::Value();
    }
    if(getReadme())
    {
        ret["readme"]=getValueOfReadme();
    }
    else
    {
        ret["readme"]=Json::Value();
    }
    if(getSha256sum())
    {
        ret["sha256sum"]=getValueOfSha256sum();
    }
    else
    {
        ret["sha256sum"]=Json::Value();
    }
    return ret;
}

Json::Value Package::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPublishedAt())
            {
                ret[pMasqueradingVector[1]]=getPublishedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getMetadata())
            {
                ret[pMasqueradingVector[2]]=getValueOfMetadata();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[3]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[4]]=getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getEdition())
            {
                ret[pMasqueradingVector[5]]=getValueOfEdition();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAuthors())
            {
                ret[pMasqueradingVector[6]]=getValueOfAuthors();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getRepository())
            {
                ret[pMasqueradingVector[7]]=getValueOfRepository();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[8]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getLicense())
            {
                ret[pMasqueradingVector[9]]=getValueOfLicense();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getReadme())
            {
                ret[pMasqueradingVector[10]]=getValueOfReadme();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getSha256sum())
            {
                ret[pMasqueradingVector[11]]=getValueOfSha256sum();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPublishedAt())
    {
        ret["published_at"]=getPublishedAt()->toDbStringLocal();
    }
    else
    {
        ret["published_at"]=Json::Value();
    }
    if(getMetadata())
    {
        ret["metadata"]=getValueOfMetadata();
    }
    else
    {
        ret["metadata"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getEdition())
    {
        ret["edition"]=getValueOfEdition();
    }
    else
    {
        ret["edition"]=Json::Value();
    }
    if(getAuthors())
    {
        ret["authors"]=getValueOfAuthors();
    }
    else
    {
        ret["authors"]=Json::Value();
    }
    if(getRepository())
    {
        ret["repository"]=getValueOfRepository();
    }
    else
    {
        ret["repository"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getLicense())
    {
        ret["license"]=getValueOfLicense();
    }
    else
    {
        ret["license"]=Json::Value();
    }
    if(getReadme())
    {
        ret["readme"]=getValueOfReadme();
    }
    else
    {
        ret["readme"]=Json::Value();
    }
    if(getSha256sum())
    {
        ret["sha256sum"]=getValueOfSha256sum();
    }
    else
    {
        ret["sha256sum"]=Json::Value();
    }
    return ret;
}

bool Package::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("published_at"))
    {
        if(!validJsonOfField(1, "published_at", pJson["published_at"], err, true))
            return false;
    }
    if(pJson.isMember("metadata"))
    {
        if(!validJsonOfField(2, "metadata", pJson["metadata"], err, true))
            return false;
    }
    else
    {
        err="The metadata column cannot be null";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(4, "version", pJson["version"], err, true))
            return false;
    }
    else
    {
        err="The version column cannot be null";
        return false;
    }
    if(pJson.isMember("edition"))
    {
        if(!validJsonOfField(5, "edition", pJson["edition"], err, true))
            return false;
    }
    else
    {
        err="The edition column cannot be null";
        return false;
    }
    if(pJson.isMember("authors"))
    {
        if(!validJsonOfField(6, "authors", pJson["authors"], err, true))
            return false;
    }
    else
    {
        err="The authors column cannot be null";
        return false;
    }
    if(pJson.isMember("repository"))
    {
        if(!validJsonOfField(7, "repository", pJson["repository"], err, true))
            return false;
    }
    else
    {
        err="The repository column cannot be null";
        return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(8, "description", pJson["description"], err, true))
            return false;
    }
    else
    {
        err="The description column cannot be null";
        return false;
    }
    if(pJson.isMember("license"))
    {
        if(!validJsonOfField(9, "license", pJson["license"], err, true))
            return false;
    }
    else
    {
        err="The license column cannot be null";
        return false;
    }
    if(pJson.isMember("readme"))
    {
        if(!validJsonOfField(10, "readme", pJson["readme"], err, true))
            return false;
    }
    if(pJson.isMember("sha256sum"))
    {
        if(!validJsonOfField(11, "sha256sum", pJson["sha256sum"], err, true))
            return false;
    }
    else
    {
        err="The sha256sum column cannot be null";
        return false;
    }
    return true;
}
bool Package::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Package::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("published_at"))
    {
        if(!validJsonOfField(1, "published_at", pJson["published_at"], err, false))
            return false;
    }
    if(pJson.isMember("metadata"))
    {
        if(!validJsonOfField(2, "metadata", pJson["metadata"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(4, "version", pJson["version"], err, false))
            return false;
    }
    if(pJson.isMember("edition"))
    {
        if(!validJsonOfField(5, "edition", pJson["edition"], err, false))
            return false;
    }
    if(pJson.isMember("authors"))
    {
        if(!validJsonOfField(6, "authors", pJson["authors"], err, false))
            return false;
    }
    if(pJson.isMember("repository"))
    {
        if(!validJsonOfField(7, "repository", pJson["repository"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(8, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("license"))
    {
        if(!validJsonOfField(9, "license", pJson["license"], err, false))
            return false;
    }
    if(pJson.isMember("readme"))
    {
        if(!validJsonOfField(10, "readme", pJson["readme"], err, false))
            return false;
    }
    if(pJson.isMember("sha256sum"))
    {
        if(!validJsonOfField(11, "sha256sum", pJson["sha256sum"], err, false))
            return false;
    }
    return true;
}
bool Package::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Package::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 64)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
